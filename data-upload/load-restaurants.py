import boto3
import datetime
import requests
from urllib.parse import quote
from opensearchpy import OpenSearch
from decimal import Decimal


print('lets upload some restaurant data to dynamodb and elasticsearch')

# Init dynamodb client
dyn_client = boto3.resource('dynamodb')

# Password for the 'elastic' user generated by Elasticsearch
ELASTIC_USER = "<ENTER>"
ELASTIC_PASSWORD = "<ENTER>"
ELASTIC_URL = "<ENTER>"

# Create the client with SSL/TLS enabled, but hostname verification disabled.
es_client = OpenSearch(
    hosts = [{'host': ELASTIC_URL, 'port': 443}],
    http_compress = True, # enables gzip compression for request bodies
    http_auth = (ELASTIC_USER, ELASTIC_PASSWORD),
    use_ssl = True,
    ssl_assert_hostname = False,
    ssl_show_warn = False,
)

# Yelp API constants
YELP_API_KEY="<ENTER>"
API_HOST = 'https://api.yelp.com'
SEARCH_PATH = '/v3/businesses/search'

def request(host, path, api_key, url_params=None):
    """Given your api_key, send a GET request to the API.
    Args:
        host (str): The domain host of the API.
        path (str): The path of the API after the domain.
        api_key (str): Your API Key.
        url_params (dict): An optional set of query parameters in the request.
    Returns:
        dict: The JSON response from the request.
    Raises:
        HTTPError: An error occurs from the HTTP request.
    """
    url_params = url_params or {}
    url = '{0}{1}'.format(host, quote(path.encode('utf8')))
    headers = {
        'Authorization': 'Bearer %s' % api_key,
    }

    print(u'Querying {0} ...'.format(url))

    response = requests.request('GET', url, headers=headers, params=url_params)

    return response.json()


def search(category, location, limit, offset):
    """Query the Search API by a search term and location.
    Args:
        term (str): The search term passed to the API.
        location (str): The search location passed to the API.
    Returns:
        dict: The JSON response from the request.
    """

    url_params = {
        'categories': category.replace(' ', '+'),
        'location': location.replace(' ', '+'),
        'limit': limit,
        'offset': offset,
    }
    return request(API_HOST, SEARCH_PATH, YELP_API_KEY, url_params=url_params)


offset = 0
total = 0
CUISINE = 'french'
dyn_table = dyn_client.Table('yelp-restaurants')
while offset <= 950:
    response = search(CUISINE, 'manhattan', 50, offset)
    total += len(response['businesses'])
    print(len(response['businesses']))
    print('total: ' + str(total))
    if len(response['businesses']) < 50:
        offset = 950
    offset += 50

    for business in response['businesses']:
        es_client.update(
            'restaurants',
            business["id"],
            {
                "script": {
                    "source": "ctx._source.cuisines.add(params.cuisines)",
                    "lang": "painless",
                    "params": {
                        "cuisines": CUISINE
                    }
                },
                "upsert": {
                    "cuisines": [CUISINE]
                }
            },
        )

        dyn_table.put_item(
        Item={
                'businessId': business["id"],
                'name': business["name"],
                'location': business["location"],
                'coordinates': {
                    "latitude": str(business["coordinates"]["latitude"]),
                    "longitude": str(business["coordinates"]["longitude"]),
                },
                'rating': Decimal(business["rating"]),
                'reviewCount': Decimal(business["review_count"]),
                'insertedAtTimestamp': datetime.datetime.now().isoformat(),
            }
        )

print('done')
